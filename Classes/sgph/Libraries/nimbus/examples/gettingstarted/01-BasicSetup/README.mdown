
Hello there!
============

Welcome to the Nimbus iOS framework.

Within Nimbus you will find that no feature exists without painstaking care devoted to
documentation and testing. This focus results in slower development of the framework
than might otherwise be seen, but at the clear benefit of being a framework that
can sustain its own growth.


What is the Nimbus framework?
=============================

Nimbus is a from-the-ground-up set of libraries that augment the way you build iOS
applications. At the lowest level, you'll find a set of tools for debugging, testing
SDK support, and working with Foundation data types. One level above that you'll find
standard user interfaces, network-enabled views, and various other powerful features
to accelerate your app development.

Visually it's best to think of Nimbus as a set of features all built upon a common
core, like so:

    |  Nimbus Launcher  |   Network-Enabled Images  |  Navigator  |  etc...  |
    --------------------------------------------------------------------------
                                 The Nimbus Core
    ==========================================================================

You can choose to include any one of the above features in your project without
depending on the others. The only part of Nimbus you will consistently need to
add to your project is the core.


So how do I get started?
========================

The beauty of Nimbus is that you can dip your toes in before committing to the
full framework. If you have an existing application you can add Nimbus' core
to your project and begin using some of the core features in your own project
to familiarize yourself with the useful set of provided tools. If you're starting
from scratch you can choose to add Nimbus to your project at any point down the
development life-cycle.

Nothing about Nimbus requires that you commit to it from the start of your
project. In fact, it's been consciously designed to seamlessly integrate into
any development environment. If you prefer developing apps with interface builder
then you can do so. If you prefer doing things by hand then Nimbus will allow
that as well.


Adding Nimbus to your project
-----------------------------

Let's quickly go over the basic structure of a Nimbus library.

Within the root `src` directory resides each of the Nimbus libraries. Also
included in this directory are this Doxygen.h header, which includes many of Nimbus'
articles, and the `common` and `resources` directories, used
for sharing things between each of the libraries.

Each library is placed in its own folder with the following directory structure:

    deps           Declares this library's dependencies, one on each line, by name.
    examples/      Contrived examples that demo particular features.
    lib/           Used only in building the library as a static library.
    src/           The source for the library.
    unittests/     Used only in unit testing the library.

When you want to add a Nimbus library to your project there are only two things you need
to care about: the `src` directory and the `deps` file.

The `deps` file contains the list of libraries that you will need to include in
your project in order for the library to build. Nearly every Nimbus library depends on core.

To add a library to your project, simply drag all of the source files within the library's
`src` directory to your project. Do this for each of the dependencies as well and
then include the library's header file in your project somewhere. The library's header file
will usually be some form of `NimbusLibraryName.h` and will include all of the
library's important features.

For example, if you were to add the Nimbus Core library to your project, you'd add all of
the files within `src/core/src` to your project and then include the following:

    #import "NimbusCore.h"


What are the other folders for?
-------------------------------

The `examples` directory contains short snippets of code that show example
uses of certain features. These examples are designed to include code that
you can copy and paste into your project if you'd like to try them out.

The `lib` directory contains files used only when building the feature as
a static library.

The `unittests` directory contains source for running unit tests. The core
offers a solid set of examples of unit tests.


